# Ask Aithena App - Environment Variables Sample
# Copy this file to .env.local and update with your values

# ====================
# REQUIRED VARIABLES
# ====================

# Client-Side URLs (what browser sees)
# For server-side proxy mode: Use relative paths
# For direct connection mode: Use full URLs accessible from browser

# API URL - What the browser uses to make API calls
# Server-side proxy mode: /api (Next.js proxies to internal service)
# Direct mode: http://localhost:8000 or https://your-domain.com/api
NEXT_PUBLIC_API_URL=/api

# RabbitMQ WebSocket URL - What the browser uses for WebSocket connection
# Server-side proxy mode: /rabbitmq/ws (Next.js proxies to internal service)
# Direct mode: ws://localhost:15674/ws or wss://your-domain.com/rabbitmq/ws
NEXT_PUBLIC_RABBITMQ_WS_URL=/rabbitmq/ws

# Server-Side URLs (internal services - used by Next.js server proxy)
# These are only used when running in server-side proxy mode
# For local development: Use localhost URLs
# For Kubernetes: Use internal service names

# Internal API URL - Where Next.js server connects to the API
# Local: http://localhost:8000
# Kubernetes: http://ask-aithena-agent-service:8000
INTERNAL_API_URL=http://localhost:8000

# Internal RabbitMQ WebSocket URL - Where Next.js server connects to RabbitMQ
# Local: ws://localhost:15674/ws
# Kubernetes: ws://rabbitmq-service:15674/ws
INTERNAL_RABBITMQ_WS_URL=ws://localhost:15674/ws

# ====================
# OPTIONAL VARIABLES
# ====================

# Application environment (development, staging, production)
APP_ENV=development

# Node environment (development or production)
NODE_ENV=development

# Server port (default: 3000)
PORT=3000

# ====================
# IMPORTANT NOTES
# ====================
#
# 1. NEXT_PUBLIC_ prefix:
#    - These variables are exposed to the browser
#    - They must use URLs accessible from the user's browser
#    - DO NOT use internal Kubernetes service names (e.g., rabbitmq-service)
#
# 2. Local Development:
#    - Use localhost URLs for both API and WebSocket
#    - Ensure backend services are running locally
#
# 3. Kubernetes Deployment:
#    - Set these in your ConfigMap
#    - Use externally accessible URLs (via Ingress, NodePort, or LoadBalancer)
#    - See KUBERNETES_DEPLOYMENT_GUIDE.md for details
#
# 4. Protocol Selection:
#    - Use ws:// for HTTP deployments
#    - Use wss:// for HTTPS deployments
#    - Mismatched protocols will cause connection failures
#
